load("@bazel_tools//tools/jdk:default_java_toolchain.bzl", "DEFAULT_JAVACOPTS", "JDK8_JVM_OPTS", "JDK9_JVM_OPTS", "default_java_toolchain")
load("@io_bazel_rules_scala//scala:scala_toolchain.bzl", "scala_toolchain")
load("@io_bazel_rules_scala//scala:providers.bzl", "declare_deps_provider")

alias(
    name = "jdk8",
    actual = select(
        {
            "@bazel_tools//src/conditions:linux_x86_64": "@jdk8_linux//:jdk",
            "@bazel_tools//src/conditions:darwin": "@jdk8_macos//:jdk",
            "@bazel_tools//src/conditions:darwin_x86_64": "@jdk8_macos//:jdk",
        },
        no_match_error = "Could not find a JDK for host execution environment, please explicitly" +
                         " provide one using `--host_javabase.`",
    ),
    visibility = ["//visibility:public"],
)

default_java_toolchain(
    name = "java8_toolchain",
    bootclasspath = ["@bazel_tools//tools/jdk:platformclasspath"],
    jvm_opts = JDK8_JVM_OPTS,
    source_version = "8",
    target_version = "8",
    visibility = ["//visibility:public"],
)

scala_toolchain(
    name = "my_toolchain_impl",
    dep_providers = [
        ":my_scala_compile_classpath_provider",
        ":my_scala_library_classpath_provider",
        ":my_scala_macro_classpath_provider",
        ":my_scala_xml_provider",
        ":my_parser_combinators_provider",
    ],
    scalacopts = ["-Ywarn-unused"],
    unused_dependency_checker_mode = "off",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "my_scala_toolchain",
    toolchain = "my_toolchain_impl",
    toolchain_type = "@io_bazel_rules_scala//scala:toolchain_type",
    visibility = ["//visibility:public"],
)

declare_deps_provider(
    name = "my_scala_compile_classpath_provider",
    deps_id = "scala_compile_classpath",
    visibility = ["//visibility:public"],
    deps = [
        "@scala_compiler",
        "@scala_library",
        "@scala_reflect",
    ],
)

declare_deps_provider(
    name = "my_scala_library_classpath_provider",
    deps_id = "scala_library_classpath",
    deps = [
        "@scala_library",
        "@scala_reflect",
    ],
)

declare_deps_provider(
    name = "my_scala_macro_classpath_provider",
    deps_id = "scala_macro_classpath",
    deps = [
        "@scala_library",
        "@scala_reflect",
    ],
)

declare_deps_provider(
    name = "my_scala_xml_provider",
    deps_id = "scala_xml",
    deps = ["@io_bazel_rules_scala_scala_xml"],
)

declare_deps_provider(
    name = "my_parser_combinators_provider",
    deps_id = "parser_combinators",
    deps = ["@io_bazel_rules_scala_scala_parser_combinators"],
)
